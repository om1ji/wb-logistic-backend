import asyncio
import logging
import os
from typing import Dict, List, Optional, Union

import uvicorn
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from handlers import callbacks, commands
from handlers.callbacks import router as callbacks_router

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
group = os.getenv("TELEGRAM_GROUP_ID")
dp = Dispatcher()

callbacks_router.bot = bot

dp.include_router(callbacks_router)
dp.include_router(commands.router)

app = FastAPI()


def message_builder(order_data: Dict) -> Dict[str, Union[str, InlineKeyboardMarkup]]:
    """
    Builds a message for Telegram notification with inline keyboard
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞
        message_parts.append(f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_data.get('sequence_number', 'N/A')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–ª–∞–¥–µ
        if warehouse := order_data.get('warehouse_name'):
            message_parts.append(f"\nüè≠ –°–∫–ª–∞–¥: {warehouse}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ
        cargo_info = []
        if order_data.get('cargo_type') == 'boxes':
            if box_size := order_data.get('container_type'):
                cargo_info.append(f"üìè –†–∞–∑–º–µ—Ä –∫–æ—Ä–æ–±–∫–∏: {box_size}")
            if box_count := order_data.get('box_quantity'):
                cargo_info.append(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫: {box_count}")
        elif order_data.get('cargo_type') == 'pallets':
            if pallet_count := order_data.get('pallet_quantity'):
                cargo_info.append(f"üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç: {pallet_count}")

        if cargo_info:
            message_parts.append("\nüì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ:\n" + "\n".join(cargo_info))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
        if services := order_data.get('additional_services', []):
            services_info = []
            for service in services:
                if name := service.get('name'):
                    price = service.get('price', 0)
                    services_info.append(f"‚Ä¢ {name}: {price} ‚ÇΩ")
            if services_info:
                message_parts.append("\nüõ† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" + "\n".join(services_info))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
        company_info = []
        if company := order_data.get('company_name'):
            company_info.append(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}")
        if contact := order_data.get('contact_name'):
            company_info.append(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {contact}")
        if phone := order_data.get('contact_phone'):
            company_info.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")

        if company_info:
            message_parts.append("\n" + "\n".join(company_info))

        # –ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞
        if pickup_address := order_data.get('pickup_address'):
            message_parts.append(f"\nüìç –ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞:\n{pickup_address}")

        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if total_cost := order_data.get('total_cost'):
            message_parts.append(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚ÇΩ")

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if comments := order_data.get('comments'):
            message_parts.append(f"\nüí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:\n{comments}")

        print(order_data.get('order_id'))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                        callback_data=f"order_accept_{order_data.get('order_id')}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"order_reject_{order_data.get('order_id')}"
                    )
                ]
            ]
        )

        return {
            "text": "\n".join(message_parts),
            "reply_markup": keyboard
        }
    except Exception as e:
        logger.error(f"Error building message: {e}")
        return {
            "text": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
            "reply_markup": None
        }


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏."
    )


async def send_notification(chat_id: Union[str, int], order_data: Dict) -> None:
    """
    Sends notification about new order to specified chat
    """
    try:
        message = message_builder(order_data)
        await bot.send_message(
            chat_id=chat_id,
            text=message["text"],
            reply_markup=message["reply_markup"]
        )
    except Exception as e:
        logger.error(f"Error sending notification: {e}")


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.post("/api/send_notification")
async def send_notification_endpoint(request: Request):
    try:
        order_data = await request.json()
        await send_notification(group, order_data)
        return {"status": "success"}
    except Exception as e:
        logging.error(f"Error sending notification: {str(e)}")
        return {"status": "error", "message": str(e)}


# –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
async def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot_task = asyncio.create_task(dp.start_polling(bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä
    config = uvicorn.Config(app, host="0.0.0.0", port=8080)
    server = uvicorn.Server(config)
    await server.serve()


@app.get("/health")
async def health_check():
    return {"status": "ok"}


if __name__ == "__main__":
    asyncio.run(main())
