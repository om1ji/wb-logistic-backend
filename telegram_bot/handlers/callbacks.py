import logging
from typing import Union

import requests
from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from services.api_client import ApiClient
import os 
from dotenv import load_dotenv

load_dotenv()

router = Router()
logger = logging.getLogger(__name__)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º WB_BACKEND_URL –≤–º–µ—Å—Ç–æ API_BASE_URL
WB_BACKEND_URL = os.getenv("WB_BACKEND_URL", "http://localhost:8000")

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è bot –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ bot.py
bot = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
async def get_drivers():
    try:
        logger.info(f"Getting drivers from {WB_BACKEND_URL}/orders/transport/drivers/")
        response = requests.get(f"{WB_BACKEND_URL}/orders/transport/drivers/")
        if response.status_code == 200:
            return response.json()
        logger.warning(f"Failed to get drivers: {response.status_code} - {response.text}")
        return []
    except Exception as e:
        logger.error(f"Error getting drivers: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤
async def get_trucks():
    try:
        logger.info(f"Getting trucks from {WB_BACKEND_URL}/orders/transport/trucks/")
        response = requests.get(f"{WB_BACKEND_URL}/orders/transport/trucks/")
        if response.status_code == 200:
            return response.json()
        logger.warning(f"Failed to get trucks: {response.status_code} - {response.text}")
        return []
    except Exception as e:
        logger.error(f"Error getting trucks: {e}")
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
@router.callback_query(F.data.startswith("order_reject_"))
async def reject_order(callback: CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å"
@router.callback_query(F.data.startswith("order_accept_"))
async def accept_order(callback: CallbackQuery):
    try:
        order_id = callback.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        drivers = await get_drivers()
        if not drivers:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
        keyboard = []
        for driver in drivers:
            if driver.get("is_active", True):  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏
                keyboard.append([
                    InlineKeyboardButton(
                        text=driver["full_name"],
                        callback_data=f"driver_{driver['id']}_{order_id}"  # –î–æ–±–∞–≤–ª—è–µ–º order_id
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_{order_id}"
            )
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è")
    except Exception as e:
        logger.error(f"Error in accept_order: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("driver_"))
async def select_driver(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞
        _, driver_id, order_id = callback.data.split("_")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤
        trucks = await get_trucks()
        if not trucks:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–∑–æ–≤–∏–∫–∞–º–∏
        keyboard = []
        for truck in trucks:
            if truck.get("is_active", True):  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–∑–æ–≤–∏–∫–∏
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"{truck['brand']} {truck['truck_model']} - {truck['plate_number']}",
                        callback_data=f"truck_{truck['id']}_{driver_id}_{order_id}"  # –î–æ–±–∞–≤–ª—è–µ–º order_id
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append([
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data=f"cancel_{order_id}"
            )
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.edit_reply_markup(
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
    except Exception as e:
        logger.error(f"Error in select_driver: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–∑–æ–≤–∏–∫–∞
@router.callback_query(F.data.startswith("truck_"))
async def select_truck(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–∑–æ–≤–∏–∫–∞, –≤–æ–¥–∏—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞
        _, truck_id, driver_id, order_id = callback.data.split("_")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"confirm_{driver_id}_{truck_id}_{order_id}"  # –î–æ–±–∞–≤–ª—è–µ–º order_id
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"cancel_{order_id}"
                    )
                ]
            ]
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –∏ –≥—Ä—É–∑–æ–≤–∏–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        driver = next((d for d in await get_drivers() if str(d["id"]) == driver_id), None)
        truck = next((t for t in await get_trucks() if str(t["id"]) == truck_id), None)

        confirmation_text = ""
        
        if driver:
            confirmation_text += f"\nüë®‚Äç‚úàÔ∏è –í–æ–¥–∏—Ç–µ–ª—å: {driver['full_name']}"
        if truck:
            confirmation_text += f"\nüöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {truck['brand']} {truck['truck_model']} - {truck['plate_number']}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=callback.message.text + "\n\n" + confirmation_text,
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Error in select_truck: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
@router.callback_query(F.data.startswith("confirm_"))
async def confirm_selection(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è, –≥—Ä—É–∑–æ–≤–∏–∫–∞ –∏ –∑–∞–∫–∞–∑–∞
        _, driver_id, truck_id, order_id = callback.data.split("_")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –∏ –≥—Ä—É–∑–æ–≤–∏–∫–∞
        response = requests.post(
            f"{WB_BACKEND_URL}/orders/{order_id}/assign_driver/",
            json={
                "driver_id": driver_id,
                "truck_id": truck_id
            }
        )

        if response.status_code == 200:
            result = response.json()
            logger.info(f"Driver and truck assigned successfully: {result}")
            await callback.message.edit_text(
                text=callback.message.text + "\n\n" + f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç\n\n",
                reply_markup=None
            )
        else:
            logger.error(f"Error assigning driver and truck: {response.status_code} - {response.text}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
    except Exception as e:
        logger.error(f"Error in confirm_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data.startswith("cancel_"))
async def cancel_selection(callback: CallbackQuery):
    try:
        order_id = callback.data.split("_")[1]
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                        callback_data=f"order_accept_{order_id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"order_reject_{order_id}"
                    )
                ]
            ]
        )
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"Error in cancel_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
