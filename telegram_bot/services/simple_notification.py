import logging
import requests
import json
from typing import Dict, Union, Optional

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_API_URL = "https://api.telegram.org/bot"
BOT_TOKEN = None
ADMIN_GROUP_ID = None

def init_notification_service(token: str, group_id: str):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ –∏ ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    global BOT_TOKEN, ADMIN_GROUP_ID
    BOT_TOKEN = token
    ADMIN_GROUP_ID = group_id

def build_message_for_admin(order_data: Dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    """
    try:
        message_parts = []
        
        message_parts.append(f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_data.get('sequence_number', 'N/A')}")
        
        if warehouse := order_data.get('warehouse_name'):
            message_parts.append(f"\nüè≠ –°–∫–ª–∞–¥: {warehouse}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ
        cargo_info = []
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ –∏–∑ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        cargo_data = order_data.get('cargo_info', {})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫–∏
        boxes = cargo_data.get('boxes', {})
        box_count = boxes.get('count')
        if box_count and int(box_count) > 0:
            cargo_info.append(f"üì¶ –ö–æ—Ä–æ–±–∫–∏:")
            cargo_info.append(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {box_count}")
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            box_type = boxes.get('container_type')
            if box_type and box_type != "–î—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä":
                cargo_info.append(f"‚Ä¢ –†–∞–∑–º–µ—Ä: {box_type}")
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            else:
                dimensions = boxes.get('dimensions', {})
                length = dimensions.get('length')
                width = dimensions.get('width')
                height = dimensions.get('height')
                if length and width and height:
                    cargo_info.append(f"‚Ä¢ –†–∞–∑–º–µ—Ä—ã (–î√ó–®√ó–í): {length}√ó{width}√ó{height} —Å–º")
                
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ª–ª–µ—Ç—ã
        pallets = cargo_data.get('pallets', {})
        pallet_count = pallets.get('count')
        if pallet_count and int(pallet_count) > 0:
            cargo_info.append(f"üîß –ü–∞–ª–ª–µ—Ç—ã:")
            cargo_info.append(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {pallet_count}")
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤–µ—Å–∞
            pallet_type = pallets.get('container_type')
            if pallet_type and pallet_type != "–î—Ä—É–≥–æ–π –≤–µ—Å":
                cargo_info.append(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–µ—Å–∞: {pallet_type}")
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–µ—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            else:
                if weight := pallets.get('weight'):
                    cargo_info.append(f"‚Ä¢ –í–µ—Å: {weight} –∫–≥")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if cargo_info:
            message_parts.append("\n" + "\n".join(cargo_info))

        if services := order_data.get('additional_services', []):
            services_info = []
            for service in services:
                if name := service.get('name'):
                    price = service.get('price', 0)
                    services_info.append(f"‚Ä¢ {name}: {price} ‚ÇΩ")
            if services_info:
                message_parts.append("\nüõ† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" + "\n".join(services_info))

        company_info = []
        if company := order_data.get('company_name'):
            company_info.append(f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}")
        if contact := order_data.get('client_name'):
            company_info.append(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ: {contact}")
        if phone := order_data.get('client_phone'):
            company_info.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")

        if company_info:
            message_parts.append("\n" + "\n".join(company_info))

        pickup_address = order_data.get('pickup_address')
        if pickup_address != "" and pickup_address != "–ù–µ —É–∫–∞–∑–∞–Ω":
            message_parts.append(f"\nüìç –ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞:\n{pickup_address}")

        if total_cost := order_data.get('cost'):
            message_parts.append(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚ÇΩ")
            
        return "\n".join(message_parts)
        
    except Exception as e:
        logger.error(f"Error building admin message: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞"

def build_user_message(notification_data: Dict) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        notification_type = notification_data.get("notification_type")
        sequence_number = notification_data.get("sequence_number", "")
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –ª—é–±–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
        order_details = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ
        cargo_type = notification_data.get("cargo_type", "")
        box_count = notification_data.get("box_count")
        pallet_count = notification_data.get("pallet_count")
        
        if cargo_type:
            order_details.append(f"üöö –¢–∏–ø –≥—Ä—É–∑–∞: {cargo_type}")
        
        if box_count and int(box_count) > 0:
            order_details.append(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫: {box_count}")
            
        if pallet_count and int(pallet_count) > 0:
            order_details.append(f"üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç: {pallet_count}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
        if services := notification_data.get("additional_services", []):
            services_text = []
            for service in services:
                if isinstance(service, dict) and (name := service.get("name")):
                    price = service.get("price", "")
                    services_text.append(f"‚Ä¢ {name}" + (f": {price} ‚ÇΩ" if price else ""))
                elif isinstance(service, str):
                    services_text.append(f"‚Ä¢ {service}")
                    
            if services_text:
                order_details.append("\nüõ† –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:\n" + "\n".join(services_text))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_type == "order_accepted":
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
            driver_name = notification_data.get("driver_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
            driver_phone = notification_data.get("driver_phone", "")
            truck_info = notification_data.get("truck_info", "")
            
            message_text = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{sequence_number} –ø—Ä–∏–Ω—è—Ç!\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥–∏—Ç–µ–ª–µ –∏ –≥—Ä—É–∑–æ–≤–∏–∫–µ
            driver_info = []
            driver_info.append(f"üöö –ì—Ä—É–∑–æ–≤–∏–∫: {truck_info}")
            driver_info.append(f"üë®‚Äç‚úàÔ∏è –í–æ–¥–∏—Ç–µ–ª—å: {driver_name}")
            
            if driver_phone:
                driver_info.append(f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_phone}")
                
            message_text += "\n".join(driver_info)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            if order_details:
                message_text += "\n\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n" + "\n".join(order_details)
                
            return message_text
            
        elif notification_type == "order_rejected":
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            message_text = f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{sequence_number} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
            if reason := notification_data.get("reject_reason"):
                message_text += f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            if order_details:
                message_text += "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:\n" + "\n".join(order_details)
                
            message_text += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            return message_text
            
        else:
            logger.warning(f"Unknown notification type: {notification_type}")
            return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞"
    except Exception as e:
        logger.error(f"Error building user message: {str(e)}")
        return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞"

def build_inline_keyboard(order_id: str) -> Dict:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    return {
        "inline_keyboard": [
            [
                {
                    "text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    "callback_data": f"order_accept_{order_id}"
                },
                {
                    "text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    "callback_data": f"order_reject_{order_id}"
                }
            ]
        ]
    }

def send_telegram_message(chat_id: Union[str, int], text: str, reply_markup: Optional[Dict] = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –ø–æ–º–æ—â—å—é –ø—Ä—è–º–æ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
    """
    if not BOT_TOKEN:
        logger.error("Bot token not initialized")
        return False
        
    url = f"{TELEGRAM_API_URL}{BOT_TOKEN}/sendMessage"
    
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        
        if response.status_code == 200:
            return True
        else:
            logger.error(f"Failed to send message to {chat_id}: {response.status_code} {response.text}")
            return False
    except Exception as e:
        logger.error(f"Error sending message to {chat_id}: {str(e)}")
        return False

def send_admin_notification(order_data: Dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """
    if not ADMIN_GROUP_ID:
        logger.error("Admin group ID not initialized")
        return False
        
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = build_message_for_admin(order_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_inline_keyboard(order_data.get('order_id', ''))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return send_telegram_message(ADMIN_GROUP_ID, message_text, keyboard)

def send_user_notification(notification_data: Dict) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
    """
    user_id = notification_data.get("telegram_user_id")
    if not user_id:
        logger.error("No telegram_user_id provided for user notification")
        return False
        
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = build_user_message(notification_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return send_telegram_message(user_id, message_text)
